package main

import (
	"bytes"
	"fmt"
	"log"
	"os"
	"os/exec"
	"path"
	"path/filepath"
	"regexp"
	"strconv"
)

const versionInfo = `{
	"FixedFileInfo": {
	  "FileVersion": {
		"Major": %d,
		"Minor": %d,
		"Patch": %d,
		"Build": %d
	  },
	  "ProductVersion": {
		"Major": %d,
		"Minor": %d,
		"Patch": %d,
		"Build": %d
	  }
	},
	"StringFileInfo": {
		"Comments": "",
		"CompanyName": "github.com/evogelsa",
		"FileDescription": "DCS Real Weather Updater",
		"FileVersion": "%d.%d.%d",
		"InternalName": "DCS Real Weather",
		"LegalCopyright": "Copyright 2020 evogelsa",
		"OriginalFilename": "realweather.exe",
		"ProductName": "DCS Real Weather",
		"ProductVersion": "%d.%d.%d.%d"
	},
	"VarFileInfo": {
	  "Translation": {
		  "LangID": "0409",
		  "CharsetID": "0"
	  }
	},
	"IconPath": "%s",
	"ManifestPath": ""
}
`

const meta = `// Code generated by go run generate.go; DO NOT EDIT.

package versioninfo

const (
	Major = %d
	Minor = %d
	Patch = %d
	CommitNum = %d
	Commit = "%s"
	Pre = "%s"
)
`

var re = regexp.MustCompile(`v(?P<Major>\d+)\.(?P<Minor>\d+)\.(?P<Patch>\d+)-?(?P<Pre>(?:alpha)|(?:beta)|(?:rc\d*))?-?(?P<CommitNum>\d*)?.*(?:-g(?P<Commit>\w*))?`)

func main() {
	cmd := exec.Command("git", "describe", "--tags")
	out := &bytes.Buffer{}
	cmd.Stdout = out
	err := cmd.Run()
	if err != nil {
		log.Fatalf("error getting git info: %v", err)
	}

	gitInfo := out.String()

	match := re.FindStringSubmatch(gitInfo)
	v := make(map[string]string)

	for i, name := range re.SubexpNames() {
		if i != 0 && name != "" {
			v[name] = match[i]
		}
	}

	major, _ := strconv.Atoi(v["Major"])
	minor, _ := strconv.Atoi(v["Minor"])
	patch, _ := strconv.Atoi(v["Patch"])
	commitNum, _ := strconv.Atoi(v["CommitNum"])
	pre := v["Pre"]
	commit := v["Commit"]

	versionInfoOut := "versioninfo.json"
	metaOut := "versioninfo.go"
	iconPath := "icon.ico"
	versionOut := "version.txt"
	if len(os.Args) > 1 {
		versionInfoOut = filepath.Join(os.Args[1], versionInfoOut)
		metaOut = filepath.Join(os.Args[1], metaOut)
		iconPath = path.Join(os.Args[1], iconPath)
		versionOut = filepath.Join(os.Args[1], versionOut)
	}

	os.WriteFile(
		versionInfoOut,
		[]byte(fmt.Sprintf(
			versionInfo,
			major,
			minor,
			patch,
			commitNum,
			major,
			minor,
			patch,
			commitNum,
			major,
			minor,
			patch,
			major,
			minor,
			patch,
			commitNum,
			iconPath,
		)),
		os.ModePerm,
	)

	os.WriteFile(
		metaOut,
		[]byte(fmt.Sprintf(
			meta,
			major,
			minor,
			patch,
			commitNum,
			commit,
			pre,
		)),
		os.ModePerm,
	)

	os.WriteFile(
		versionOut,
		[]byte(gitInfo),
		os.ModePerm,
	)
}
